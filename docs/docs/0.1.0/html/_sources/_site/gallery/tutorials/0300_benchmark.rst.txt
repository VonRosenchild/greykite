.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_tutorials_0300_benchmark.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gallery_tutorials_0300_benchmark.py:


Benchmarking
============

You can easily compare predictive performance of multiple algorithms such as
``Silverkite`` and ``Prophet`` using the
`~greykite.framework.benchmark.benchmark_class.BenchmarkForecastConfig` class.
In this tutorial we describe the step by step process of defining, running and monitoring a benchmark.
We also demonstrate how to use the class functions to compute and plot errors for multiple models.


.. code-block:: default
   :lineno-start: 12


    from dataclasses import replace

    import plotly
    import plotly.graph_objs as go
    from greykite.common.evaluation import EvaluationMetricEnum
    from greykite.framework.benchmark.benchmark_class import BenchmarkForecastConfig
    from greykite.framework.benchmark.data_loader_ts import DataLoaderTS
    from greykite.framework.templates.autogen.forecast_config import (ComputationParam,
                                                                               EvaluationMetricParam,
                                                                               EvaluationPeriodParam,
                                                                               MetadataParam, ForecastConfig,
                                                                               ModelComponentsParam)
    from greykite.sklearn.cross_validation import RollingTimeSeriesSplit








Load the data
-------------
First load your dataset into a pandas dataframe.
We will use the peyton-manning dataset as a running example.


.. code-block:: default
   :lineno-start: 32


    # Loads dataset into UnivariateTimeSeries
    dl = DataLoaderTS()
    ts = dl.load_peyton_manning_ts()
    df = ts.df  # cleaned pandas.DataFrame








Define the Configs
------------------
We specify the models we want to benchmark via the ``configs`` parameter.
In this example we will benchmark 1 ``Prophet`` and 2 different ``Silverkite`` models.
We first define the common components of the models
such as ``MetadataParam`` and ``EvaluationMetricParam``, and then update the configuration to specify
individual models.


.. code-block:: default
   :lineno-start: 46


    ## Define common components  of the configs
    # Specifies dataset information
    metadata = MetadataParam(
        time_col="ts",   # name of the time column
        value_col="y",   # name of the value column
        freq="D"         # "H" for hourly, "D" for daily, "W" for weekly, etc.
    )

    # Defines number of periods to forecast into the future
    forecast_horizon = 7

    # Specifies intended coverage of the prediction interval
    coverage = 0.95

    # Defines the metrics to evaluate the forecasts
    # We use Mean Absolute Percent Error (MAPE) in this tutorial
    evaluation_metric = EvaluationMetricParam(
        cv_selection_metric=EvaluationMetricEnum.MeanAbsolutePercentError.name,
        cv_report_metrics=None
    )

    # Defines the cross-validation config within pipeline
    evaluation_period = EvaluationPeriodParam(
        cv_max_splits=1,  # Benchmarking n_splits is defined in tscv, here we don't need split to choose parameter sets
        periods_between_train_test=0,
    )

    # Defines parameters related to grid-search computation
    computation = ComputationParam(
        hyperparameter_budget=None,
        n_jobs=-1,  # to debug, change to 1 for more informative error messages
        verbose=3)

    # Defines common components across all the configs
    # ``model_template`` and ``model_components_param`` changes between configs
    common_config = ForecastConfig(
        metadata_param=metadata,
        forecast_horizon=forecast_horizon,
        coverage=coverage,
        evaluation_metric_param=evaluation_metric,
        evaluation_period_param=evaluation_period,
        computation_param=computation,
    )








Now we update ``common_config`` to specify the individual models.


.. code-block:: default
   :lineno-start: 93


    # Defines ``Prophet`` model template with custom seasonality
    model_components = ModelComponentsParam(
        seasonality={
                "seasonality_mode": ["additive"],
                "yearly_seasonality": ["auto"],
                "weekly_seasonality": [True],
            },
            growth={
                "growth_term": ["linear"]
            }
    )
    param_update = dict(
        model_template="PROPHET",
        model_components_param=model_components
    )
    Prophet = replace(common_config, **param_update)

    # Defines ``Silverkite`` model template with automatic autoregression
    # and changepoint detection
    model_components = ModelComponentsParam(
        changepoints={
            "changepoints_dict": {
                "method": "auto",
            }
        },
        autoregression={
            "autoreg_dict": "auto"
        }
    )
    param_update = dict(
        model_template="SILVERKITE",
        model_components_param=model_components
    )
    Silverkite_1 = replace(common_config, **param_update)

    # Defines ``Silverkite`` model template via string encoding
    param_update = dict(
        model_template="DAILY_SEAS_NMQM_GR_LINEAR_CP_NM_HOL_SP2_FEASET_AUTO_ALGO_RIDGE_AR_AUTO_DSI_AUTO_WSI_AUTO",
        model_components_param=None
    )
    Silverkite_2 = replace(common_config, **param_update)

    # Define the list of configs to benchmark
    # The dictionary keys will be used to store the benchmark results
    configs = {
        "Prophet": Prophet,
        "SK_1": Silverkite_1,
        "SK_2": Silverkite_2,
    }








Define the Cross-Validation (CV)
--------------------------------
In time-series forecasting we use a Rolling Window CV.
You can easily define it by using
`~greykite.sklearn.cross_validation.RollingTimeSeriesSplit` class.
The CV parameters depend on the data frequency,
forecast horizon as well as the speed of the models.
See ``Benchmarking documentation`` for guidance on how
to choose CV parameters for your use case.


.. code-block:: default
   :lineno-start: 154


    # Define the benchmark folds
    # CV parameters are changed for illustration purpose
    tscv = RollingTimeSeriesSplit(
        forecast_horizon=forecast_horizon,
        min_train_periods=2 * 365,
        expanding_window=True,
        use_most_recent_splits=True,
        periods_between_splits=5,
        periods_between_train_test=0,
        max_splits=4)  # reduced to 4 from 16 for faster runtime

    # Print the train, test split for BM folds
    for split_num, (train, test) in enumerate(tscv.split(X=df)):
        print(split_num, train, test)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0 [   0    1    2 ... 2939 2940 2941] [2942 2943 2944 2945 2946 2947 2948]
    1 [   0    1    2 ... 2944 2945 2946] [2947 2948 2949 2950 2951 2952 2953]
    2 [   0    1    2 ... 2949 2950 2951] [2952 2953 2954 2955 2956 2957 2958]
    3 [   0    1    2 ... 2954 2955 2956] [2957 2958 2959 2960 2961 2962 2963]




Run the Benchmark
-----------------
To start the benchmarking procedure execute its ``run`` method.

If you get an error message at this point, then there is a compatibility issue between your
benchmark inputs. Check :ref:`Debugging the Benchmark` section for instructions on how to derive valid inputs.


.. code-block:: default
   :lineno-start: 177


    bm = BenchmarkForecastConfig(df=df, configs=configs, tscv=tscv)
    bm.run()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|| 0/3 [00:00<?, ?it/s]    Benchmarking 'Prophet' :   0%|| 0/3 [00:00<?, ?it/s]
      0%|| 0/4 [00:00<?, ?it/s][A
    Split '0' :   0%|| 0/4 [00:00<?, ?it/s][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '0' :  25%|| 1/4 [03:18<09:56, 198.78s/it][A
    Split '1' :  25%|| 1/4 [03:18<09:56, 198.78s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '1' :  50%|########################################################################################################################################################################################################################################################################################################################################################################################                                                                                                                                                                                                                                                                                                                                                                                        | 2/4 [05:55<06:12, 186.15s/it][A
    Split '2' :  50%|| 2/4 [05:55<06:12, 186.15s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '2' :  75%|| 3/4 [08:16<02:52, 172.55s/it][A
    Split '3' :  75%|| 3/4 [08:16<02:52, 172.55s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '3' : 100%|| 4/4 [10:12<00:00, 155.65s/it][A    Split '3' : 100%|| 4/4 [10:12<00:00, 153.12s/it]
    Benchmarking 'Prophet' :  33%|| 1/3 [10:12<20:24, 612.49s/it]    Benchmarking 'SK_1' :  33%|| 1/3 [10:12<20:24, 612.49s/it]
      0%|| 0/4 [00:00<?, ?it/s][A
    Split '0' :   0%|| 0/4 [00:00<?, ?it/s][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '0' :  25%|| 1/4 [01:02<03:08, 62.79s/it][A
    Split '1' :  25%|| 1/4 [01:02<03:08, 62.79s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '1' :  50%|| 2/4 [02:00<02:02, 61.20s/it][A
    Split '2' :  50%|| 2/4 [02:00<02:02, 61.20s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '2' :  75%|| 3/4 [02:53<00:58, 58.70s/it][A
    Split '3' :  75%|| 3/4 [02:53<00:58, 58.70s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '3' : 100%|| 4/4 [03:53<00:00, 59.15s/it][A    Split '3' : 100%|| 4/4 [03:53<00:00, 58.33s/it]
    Benchmarking 'SK_1' :  67%|| 2/3 [14:05<08:18, 498.74s/it]    Benchmarking 'SK_2' :  67%|##############################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################6                                                                                                                                                                                                                                                       | 2/3 [14:05<08:18, 498.74s/it]
      0%|                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | 0/4 [00:00<?, ?it/s][A
    Split '0' :   0%|| 0/4 [00:00<?, ?it/s][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '0' :  25%|| 1/4 [00:52<02:36, 52.15s/it][A
    Split '1' :  25%|| 1/4 [00:52<02:36, 52.15s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '1' :  50%|| 2/4 [01:45<01:44, 52.38s/it][A
    Split '2' :  50%|| 2/4 [01:45<01:44, 52.38s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '2' :  75%|| 3/4 [02:36<00:52, 52.06s/it][A
    Split '3' :  75%|| 3/4 [02:36<00:52, 52.06s/it][AFitting 1 folds for each of 1 candidates, totalling 1 fits

    Split '3' : 100%|| 4/4 [03:23<00:00, 50.61s/it][A    Split '3' : 100%|| 4/4 [03:23<00:00, 50.90s/it]
    Benchmarking 'SK_2' : 100%|| 3/3 [17:29<00:00, 410.20s/it]    Benchmarking 'SK_2' : 100%|| 3/3 [17:29<00:00, 349.81s/it]




Monitor the Benchmark
---------------------
During benchmarking a couple of color coded progress bars are displayed to inform the user of the
advancement of the entire process. The first bar displays ``config`` level information, while
the second bar displays split level information for the current ``config``.
See example in `Benchmarking documentation`.

On the left side of the progress bar, it shows which ``config``/ split is currently being
benchmarked and progress within that level as a percentage.

On the right side, the user can see how many ``configs``/ splits have been benchmarked
and how many are remaining. Additionally, this bar also displays elapsed time and remaining runtime
for the corresponding level.

Benchmark Output
----------------
The output of a successful benchmark procedure is stored as a nested dictionary under the class attribute
``result``. For details on the structure of this tree check
``Benchmarking documentation``.

You can extract any specific information by navigating this tree. For example, you can
check the summary and component plot of any ``config``.


.. code-block:: default
   :lineno-start: 205


    # Check summary of SK_1 model on first fold
    model = bm.result["SK_2"]["rolling_evaluation"]["split_0"]["pipeline_result"].model
    model[-1].summary(max_colwidth=30)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ================================ Model Summary =================================

    Number of observations: 2942,   Number of features: 264
    Method: Ridge regression
    Number of nonzero features: 264
    Regularization parameter: 117.7

    Residuals:
             Min           1Q       Median           3Q          Max
          -2.302       -0.247     -0.05622       0.1641        3.282

                          Pred_col    Estimate  Std. Err Pr(>)_boot sig. code                   95%CI
                         Intercept       2.965     0.203     <2e-16       ***          (2.571, 3.329)
           events_Chinese New Year    0.002148   0.01833      0.928               (-0.02981, 0.03756)
         events_Chinese New Year-1  -0.0003129    0.0141      0.984               (-0.02894, 0.02569)
         events_Chinese New Year-2    0.004799   0.01612      0.784               (-0.02699, 0.03683)
         events_Chinese New Year+1   -0.007786   0.01661      0.664                (-0.04406, 0.0213)
         events_Chinese New Year+2     0.01831   0.01954      0.372               (-0.01648, 0.05572)
              events_Christmas Day    -0.02864   0.01357      0.042         *    (-0.0589, -0.006726)
            events_Christmas Day-1   -0.009914   0.01171      0.424              (-0.03549, 0.008811)
            events_Christmas Day-2    0.001638   0.01627      0.920                (-0.0316, 0.02664)
            events_Christmas Day+1    -0.01828   0.01202      0.122              (-0.04498, 0.002702)
            events_Christmas Day+2     0.01689  0.009557      0.070         .    (0.0007993, 0.03796)
     events_Easter...hern Ireland]    -0.01211   0.00745      0.100               (-0.02614, 0.00196)
     events_Easter...rn Ireland]-1    -0.01403  0.007024      0.042         *  (-0.02708, -0.0009846)
     events_Easter...rn Ireland]-2   -0.008355   0.00568      0.142              (-0.01936, 0.001953)
     events_Easter...rn Ireland]+1   -0.007089  0.005257      0.158              (-0.01948, 0.001286)
     events_Easter...rn Ireland]+2   -0.001197  0.003487      0.730              (-0.008374, 0.00542)
                events_Good Friday    -0.01387  0.005508      0.014         *    (-0.0247, -0.004013)
              events_Good Friday-1    -0.01211  0.005217      0.024         *   (-0.02298, -0.002785)
              events_Good Friday-2   -0.006028  0.004997      0.214               (-0.01736, 0.00223)
              events_Good Friday+1   -0.008355   0.00568      0.142              (-0.01936, 0.001953)
              events_Good Friday+2    -0.01403  0.007024      0.042         *  (-0.02708, -0.0009846)
           events_Independence Day  -0.0004059  0.007051      0.946               (-0.01345, 0.01427)
         events_Independence Day-1   -0.003586  0.006928      0.610               (-0.01702, 0.01075)
         events_Independence Day-2   -0.006493  0.005376      0.218               (-0.0159, 0.003982)
         events_Independence Day+1   -0.009756   0.00742      0.168              (-0.02411, 0.005256)
         events_Independence Day+2   -0.008646  0.008007      0.266               (-0.02531, 0.00637)
                  events_Labor Day    -0.02678   0.01062      0.010         *   (-0.04684, -0.005708)
                events_Labor Day-1    -0.00912  0.009353      0.334              (-0.02754, 0.009599)
                events_Labor Day-2  -0.0003302  0.007936      0.978               (-0.01603, 0.01511)
                events_Labor Day+1    -0.01662   0.00787      0.040         *   (-0.03328, -0.001816)
                events_Labor Day+2    -0.01963   0.00781      0.012         *   (-0.03487, -0.004808)
               events_Memorial Day     -0.0257  0.008128      0.002        **   (-0.04157, -0.008752)
             events_Memorial Day-1    -0.01463  0.006392      0.020         *   (-0.02779, -0.003098)
             events_Memorial Day-2   -0.001185  0.006313      0.880               (-0.01183, 0.01201)
             events_Memorial Day+1   -0.006978  0.004217      0.084         .   (-0.01592, 0.0001442)
             events_Memorial Day+2    0.009476  0.006384      0.114             (-0.0007537, 0.02264)
              events_New Years Day   0.0008261  0.007885      0.924               (-0.01441, 0.01793)
            events_New Years Day-1    0.008853  0.009099      0.326              (-0.009294, 0.02726)
            events_New Years Day-2     0.01817   0.01217      0.118              (-0.001238, 0.04614)
            events_New Years Day+1     0.02199   0.01111      0.052         .     (0.002312, 0.04677)
            events_New Years Day+2     0.01874   0.01122      0.100             (-0.0007762, 0.04063)
                      events_Other    0.001592   0.02093      0.944               (-0.03873, 0.04111)
                    events_Other-1    -0.00562   0.02045      0.776               (-0.04368, 0.03732)
                    events_Other-2     0.01376   0.01982      0.460               (-0.02321, 0.05255)
                    events_Other+1     0.02336   0.02103      0.244               (-0.01484, 0.06603)
                    events_Other+2     0.01555   0.01755      0.388               (-0.01772, 0.05168)
               events_Thanksgiving    -0.01042  0.005612      0.062         .  (-0.02228, -0.0001863)
             events_Thanksgiving-1    -0.02257  0.007371      0.008        **   (-0.03813, -0.009268)
             events_Thanksgiving-2    -0.01715   0.00661      0.016         *    (-0.0318, -0.005446)
             events_Thanksgiving+1   -0.004335  0.005962      0.468              (-0.01584, 0.006809)
             events_Thanksgiving+2   -0.009613   0.00508      0.062         .  (-0.02142, -0.0008491)
               events_Veterans Day   -0.002063  0.006383      0.756               (-0.01381, 0.01122)
             events_Veterans Day-1   -0.004134  0.005415      0.456              (-0.01461, 0.006333)
             events_Veterans Day-2   -0.002291  0.006748      0.754               (-0.01487, 0.01016)
             events_Veterans Day+1   -0.001116  0.006044      0.864               (-0.01227, 0.01128)
             events_Veterans Day+2   -0.001456  0.005121      0.748               (-0.0111, 0.008343)
                     str_dow_2-Tue    0.003042  0.006246      0.656              (-0.008928, 0.01569)
                     str_dow_3-Wed   -0.002967  0.005522      0.578               (-0.01424, 0.00754)
                     str_dow_4-Thu   -0.005705  0.005069      0.260              (-0.01515, 0.005093)
                     str_dow_5-Fri   -0.008719  0.005338      0.114              (-0.01903, 0.001234)
                     str_dow_6-Sat     -0.0261   0.00558     <2e-16       ***    (-0.03742, -0.01594)
                     str_dow_7-Sun    0.008548  0.006896      0.212              (-0.004112, 0.02304)
                               ct1   0.0009674   0.01512      0.944                (-0.02986, 0.0309)
                    is_weekend:ct1   -0.007118  0.006704      0.280              (-0.02023, 0.005778)
                 str_dow_2-Tue:ct1    0.002968   0.00686      0.710               (-0.01069, 0.01576)
                 str_dow_3-Wed:ct1  -0.0005901  0.005813      0.900               (-0.01101, 0.01052)
                 str_dow_4-Thu:ct1    -0.00504  0.005099      0.322              (-0.01422, 0.005753)
                 str_dow_5-Fri:ct1    0.001917  0.005389      0.732              (-0.007453, 0.01271)
                 str_dow_6-Sat:ct1   -0.008615  0.005658      0.126              (-0.01965, 0.001602)
                 str_dow_7-Sun:ct1    0.001497    0.0074      0.848               (-0.01304, 0.01491)
                 cp0_2008_09_29_00     0.02922  0.004388     <2e-16       ***      (0.02041, 0.03697)
      is_weekend:cp0_2008_09_29_00    0.007848    0.0023     <2e-16       ***      (0.00321, 0.01199)
     str_dow_2-Tue...2008_09_29_00    0.003291  0.003215      0.300             (-0.003012, 0.009814)
     str_dow_3-Wed...2008_09_29_00    0.004256  0.002434      0.066         .  (-0.0004298, 0.008935)
     str_dow_4-Thu...2008_09_29_00     0.00267  0.002278      0.254             (-0.001942, 0.007206)
     str_dow_5-Fri...2008_09_29_00    0.005361  0.002527      0.026         *     (0.0005697, 0.0101)
     str_dow_6-Sat...2008_09_29_00     0.00428  0.002733      0.126             (-0.001086, 0.009668)
     str_dow_7-Sun...2008_09_29_00    0.003568  0.003033      0.224             (-0.002735, 0.009376)
                 cp1_2008_11_03_00     0.03152  0.004681     <2e-16       ***      (0.02149, 0.04004)
      is_weekend:cp1_2008_11_03_00    0.008616  0.002445     <2e-16       ***     (0.003723, 0.01297)
     str_dow_2-Tue...2008_11_03_00    0.003657  0.003062      0.216             (-0.002169, 0.009722)
     str_dow_3-Wed...2008_11_03_00     0.00489  0.002345      0.034         *    (0.0004575, 0.00918)
     str_dow_4-Thu...2008_11_03_00    0.003777  0.002173      0.096         .  (-0.0004639, 0.008319)
     str_dow_5-Fri...2008_11_03_00    0.005404  0.002591      0.032         *    (0.0004366, 0.01002)
     str_dow_6-Sat...2008_11_03_00     0.00542  0.002686      0.036         *    (7.116e-05, 0.01052)
     str_dow_7-Sun...2008_11_03_00    0.003196     0.003      0.248             (-0.003277, 0.008443)
                 cp2_2008_12_15_00     0.03103  0.005493     <2e-16       ***       (0.0197, 0.04081)
      is_weekend:cp2_2008_12_15_00    0.008592  0.003206      0.014         *      (0.00167, 0.01499)
     str_dow_2-Tue...2008_12_15_00    0.004015  0.002953      0.168              (-0.001682, 0.01008)
     str_dow_3-Wed...2008_12_15_00    0.004366  0.002442      0.056         .   (-0.000151, 0.008668)
     str_dow_4-Thu...2008_12_15_00     0.00419  0.002298      0.088         .  (-0.0003996, 0.009095)
     str_dow_5-Fri...2008_12_15_00      0.0045  0.003025      0.142              (-0.001584, 0.00994)
     str_dow_6-Sat...2008_12_15_00    0.005632  0.002947      0.042         *     (-0.00029, 0.01083)
     str_dow_7-Sun...2008_12_15_00     0.00296  0.003409      0.384             (-0.004613, 0.008691)
                 cp3_2009_01_12_00     0.03041  0.006169     <2e-16       ***      (0.01755, 0.04159)
      is_weekend:cp3_2009_01_12_00    0.008949   0.00373      0.020         *     (0.001441, 0.01657)
     str_dow_2-Tue...2009_01_12_00    0.003926  0.003077      0.230              (-0.001828, 0.01029)
     str_dow_3-Wed...2009_01_12_00    0.003784  0.002623      0.140             (-0.001025, 0.008484)
     str_dow_4-Thu...2009_01_12_00    0.003876  0.002485      0.136             (-0.001035, 0.008921)
     str_dow_5-Fri...2009_01_12_00    0.004037  0.003193      0.220             (-0.002318, 0.009598)
     str_dow_6-Sat...2009_01_12_00    0.005608  0.003216      0.076         .   (-0.0006171, 0.01143)
     str_dow_7-Sun...2009_01_12_00    0.003341  0.003725      0.388              (-0.004336, 0.01002)
                 cp4_2009_12_21_00    -0.03082   0.01101      0.006        **   (-0.05341, -0.008792)
      is_weekend:cp4_2009_12_21_00   -0.008329  0.006187      0.186              (-0.01966, 0.004061)
     str_dow_2-Tue...2009_12_21_00   -0.007882  0.007011      0.286              (-0.02001, 0.005797)
     str_dow_3-Wed...2009_12_21_00   -0.002528  0.005299      0.650              (-0.01287, 0.008105)
     str_dow_4-Thu...2009_12_21_00  -0.0004468  0.004398      0.920             (-0.008686, 0.008342)
     str_dow_5-Fri...2009_12_21_00   -0.006564  0.005799      0.248              (-0.01884, 0.004362)
     str_dow_6-Sat...2009_12_21_00   -0.002288  0.005298      0.660              (-0.01239, 0.008067)
     str_dow_7-Sun...2009_12_21_00   -0.006042  0.007407      0.400              (-0.02015, 0.008835)
                 cp5_2010_01_25_00    -0.02797   0.01161      0.012         *   (-0.05123, -0.006655)
      is_weekend:cp5_2010_01_25_00   -0.006982  0.006896      0.316              (-0.02013, 0.006582)
     str_dow_2-Tue...2010_01_25_00   -0.007745  0.007563      0.324              (-0.02105, 0.007724)
     str_dow_3-Wed...2010_01_25_00   -0.002453  0.005518      0.668              (-0.01315, 0.008625)
     str_dow_4-Thu...2010_01_25_00  -0.0005292  0.004557      0.884             (-0.009017, 0.008627)
     str_dow_5-Fri...2010_01_25_00   -0.006771  0.005839      0.240               (-0.01895, 0.00452)
     str_dow_6-Sat...2010_01_25_00   -0.002401  0.005591      0.674              (-0.01321, 0.008487)
     str_dow_7-Sun...2010_01_25_00   -0.004581  0.008121      0.542                (-0.02116, 0.0119)
                 cp6_2011_02_14_00     0.01602   0.01392      0.260               (-0.01238, 0.04205)
      is_weekend:cp6_2011_02_14_00    0.008336  0.007581      0.266              (-0.006981, 0.02183)
     str_dow_2-Tue...2011_02_14_00  -0.0006635  0.007354      0.936               (-0.01502, 0.01341)
     str_dow_3-Wed...2011_02_14_00    0.003052  0.006155      0.654              (-0.008597, 0.01495)
     str_dow_4-Thu...2011_02_14_00    0.002093   0.00581      0.734              (-0.009839, 0.01264)
     str_dow_5-Fri...2011_02_14_00   0.0007987  0.007725      0.914                (-0.01367, 0.0157)
     str_dow_6-Sat...2011_02_14_00      0.0037   0.00717      0.602               (-0.01131, 0.01658)
     str_dow_7-Sun...2011_02_14_00    0.004635  0.008346      0.560               (-0.01139, 0.02099)
                 cp7_2012_02_27_00    -0.07575   0.01336     <2e-16       ***     (-0.1009, -0.04824)
      is_weekend:cp7_2012_02_27_00    -0.01921  0.006878      0.008        **   (-0.03179, -0.005533)
     str_dow_2-Tue...2012_02_27_00    -0.01029   0.00867      0.230               (-0.0275, 0.005767)
     str_dow_3-Wed...2012_02_27_00    -0.01247  0.008499      0.150              (-0.02984, 0.002125)
     str_dow_4-Thu...2012_02_27_00     -0.0111  0.007648      0.146              (-0.02589, 0.002913)
     str_dow_5-Fri...2012_02_27_00   -0.008443  0.008406      0.304              (-0.02436, 0.008699)
     str_dow_6-Sat...2012_02_27_00   -0.009238  0.007788      0.240              (-0.02488, 0.005534)
     str_dow_7-Sun...2012_02_27_00   -0.009974  0.008985      0.286              (-0.02713, 0.006881)
                 cp8_2012_04_09_00    -0.06728   0.01185     <2e-16       ***    (-0.09016, -0.04359)
      is_weekend:cp8_2012_04_09_00    -0.01848  0.006114      0.008        **    (-0.02949, -0.00629)
     str_dow_2-Tue...2012_04_09_00   -0.008347  0.008591      0.316              (-0.02634, 0.007341)
     str_dow_3-Wed...2012_04_09_00    -0.01062  0.007884      0.184              (-0.02638, 0.003373)
     str_dow_4-Thu...2012_04_09_00   -0.009507  0.007137      0.194              (-0.02334, 0.004756)
     str_dow_5-Fri...2012_04_09_00   -0.008424  0.007922      0.272              (-0.02292, 0.007628)
     str_dow_6-Sat...2012_04_09_00   -0.009212  0.007422      0.208               (-0.0238, 0.005112)
     str_dow_7-Sun...2012_04_09_00   -0.009268  0.008516      0.284              (-0.02578, 0.006381)
                 cp9_2013_03_04_00    0.002548    0.0128      0.826               (-0.02516, 0.02629)
      is_weekend:cp9_2013_03_04_00   -0.007725  0.007334      0.274              (-0.02318, 0.006468)
     str_dow_2-Tue...2013_03_04_00    0.008536  0.009567      0.364               (-0.01175, 0.02484)
     str_dow_3-Wed...2013_03_04_00    0.001876  0.006778      0.812               (-0.01201, 0.01413)
     str_dow_4-Thu...2013_03_04_00    0.001485   0.00666      0.824               (-0.01079, 0.01385)
     str_dow_5-Fri...2013_03_04_00   0.0006274  0.006929      0.938               (-0.01362, 0.01352)
     str_dow_6-Sat...2013_03_04_00   -0.004657  0.007074      0.508               (-0.01812, 0.01075)
     str_dow_7-Sun...2013_03_04_00   -0.003068  0.009755      0.748               (-0.02202, 0.01496)
                cp10_2014_01_27_00    -0.03711   0.02052      0.076         .    (-0.07712, 0.004033)
     is_weekend:cp10_2014_01_27_00    -0.01337   0.01029      0.218               (-0.0327, 0.005189)
     str_dow_2-Tue...2014_01_27_00    0.003891   0.01416      0.790               (-0.02166, 0.03209)
     str_dow_3-Wed...2014_01_27_00   -0.006759  0.008268      0.440              (-0.02346, 0.008952)
     str_dow_4-Thu...2014_01_27_00   -0.005404  0.007768      0.458              (-0.01964, 0.009939)
     str_dow_5-Fri...2014_01_27_00   -0.004542  0.009123      0.610               (-0.02144, 0.01267)
     str_dow_6-Sat...2014_01_27_00   -0.009578  0.007575      0.214               (-0.0232, 0.005708)
     str_dow_7-Sun...2014_01_27_00   -0.003789   0.01226      0.724               (-0.02879, 0.02094)
               ct1:sin1_tow_weekly    0.005955  0.008017      0.450              (-0.009461, 0.02161)
               ct1:cos1_tow_weekly     0.01648   0.01198      0.154              (-0.009322, 0.03813)
               ct1:sin2_tow_weekly    0.003391  0.008964      0.714               (-0.01418, 0.02042)
               ct1:cos2_tow_weekly     0.01418    0.0112      0.198              (-0.009073, 0.03535)
     cp0_2008_09_2...n1_tow_weekly   -0.001408  0.003098      0.638             (-0.007148, 0.004755)
     cp0_2008_09_2...s1_tow_weekly   0.0009381  0.004168      0.830             (-0.006561, 0.009138)
     cp0_2008_09_2...n2_tow_weekly    0.001845  0.003261      0.542              (-0.004334, 0.00863)
     cp0_2008_09_2...s2_tow_weekly    0.001587     0.004      0.654                 (-0.006591, 0.01)
     cp1_2008_11_0...n1_tow_weekly  -0.0008633  0.003261      0.796             (-0.007188, 0.005382)
     cp1_2008_11_0...s1_tow_weekly   -0.001117  0.004148      0.796             (-0.008902, 0.006894)
     cp1_2008_11_0...n2_tow_weekly    0.001951  0.003376      0.570             (-0.004278, 0.009053)
     cp1_2008_11_0...s2_tow_weekly   8.768e-05  0.003901      0.978              (-0.007821, 0.00851)
     cp2_2008_12_1...n1_tow_weekly  -0.0005445  0.003976      0.900              (-0.008645, 0.00704)
     cp2_2008_12_1...s1_tow_weekly    -0.00034   0.00465      0.946             (-0.009206, 0.008653)
     cp2_2008_12_1...n2_tow_weekly    0.001821  0.004116      0.702              (-0.005282, 0.01022)
     cp2_2008_12_1...s2_tow_weekly   0.0002237  0.004342      0.966             (-0.008407, 0.008815)
     cp3_2009_01_1...n1_tow_weekly    -0.00139  0.004534      0.792               (-0.0106, 0.007532)
     cp3_2009_01_1...s1_tow_weekly    0.001146  0.005108      0.826               (-0.00862, 0.01075)
     cp3_2009_01_1...n2_tow_weekly    0.001488  0.004709      0.762              (-0.007136, 0.01119)
     cp3_2009_01_1...s2_tow_weekly   0.0006887  0.004819      0.874              (-0.008555, 0.01009)
     cp4_2009_12_2...n1_tow_weekly   0.0009814  0.008192      0.886                (-0.01422, 0.0172)
     cp4_2009_12_2...s1_tow_weekly   -0.006367   0.01151      0.542               (-0.03071, 0.01563)
     cp4_2009_12_2...n2_tow_weekly   -0.006472  0.009127      0.480                (-0.02485, 0.0113)
     cp4_2009_12_2...s2_tow_weekly   -0.002008   0.01092      0.876               (-0.02358, 0.01708)
     cp5_2010_01_2...n1_tow_weekly   0.0001843  0.008903      0.986               (-0.01623, 0.01841)
     cp5_2010_01_2...s1_tow_weekly   -0.003521   0.01208      0.748                (-0.03032, 0.0181)
     cp5_2010_01_2...n2_tow_weekly   -0.007942  0.009908      0.426                (-0.02712, 0.0122)
     cp5_2010_01_2...s2_tow_weekly  -0.0009288   0.01167      0.938               (-0.02446, 0.02071)
     cp6_2011_02_1...n1_tow_weekly   -0.004213   0.01023      0.678               (-0.02301, 0.01703)
     cp6_2011_02_1...s1_tow_weekly    0.000776   0.01319      0.952               (-0.02476, 0.02686)
     cp6_2011_02_1...n2_tow_weekly   -0.005897    0.0105      0.582               (-0.02598, 0.01421)
     cp6_2011_02_1...s2_tow_weekly   -0.002756   0.01148      0.800                (-0.02439, 0.0194)
     cp7_2012_02_2...n1_tow_weekly   -0.004553  0.009989      0.644                 (-0.023, 0.01459)
     cp7_2012_02_2...s1_tow_weekly   -0.004436   0.01333      0.736                (-0.0303, 0.02014)
     cp7_2012_02_2...n2_tow_weekly    0.003173   0.01127      0.790               (-0.01928, 0.02605)
     cp7_2012_02_2...s2_tow_weekly   -0.002348   0.01347      0.866               (-0.03064, 0.02156)
     cp8_2012_04_0...n1_tow_weekly   -0.001123  0.009026      0.900               (-0.01793, 0.01635)
     cp8_2012_04_0...s1_tow_weekly   -0.002317   0.01208      0.858                 (-0.0258, 0.0194)
     cp8_2012_04_0...n2_tow_weekly    0.002356    0.0103      0.828               (-0.01749, 0.02257)
     cp8_2012_04_0...s2_tow_weekly   -0.001294   0.01199      0.936               (-0.02532, 0.02096)
     cp9_2013_03_0...n1_tow_weekly     0.01581  0.009794      0.112              (-0.005177, 0.03408)
     cp9_2013_03_0...s1_tow_weekly  -0.0001271   0.01229      0.994                (-0.02527, 0.0245)
     cp9_2013_03_0...n2_tow_weekly    0.007808   0.01093      0.446               (-0.01333, 0.02888)
     cp9_2013_03_0...s2_tow_weekly   0.0003552   0.01189      0.984               (-0.02152, 0.02362)
     cp10_2014_01_...n1_tow_weekly    0.008378   0.01433      0.544                (-0.01803, 0.0363)
     cp10_2014_01_...s1_tow_weekly    0.001725   0.02178      0.932                (-0.03792, 0.0466)
     cp10_2014_01_...n2_tow_weekly    0.006939   0.01684      0.676                (-0.0221, 0.03891)
     cp10_2014_01_...s2_tow_weekly   -0.002438   0.02157      0.912               (-0.04295, 0.04296)
                   sin1_tow_weekly     0.01956   0.01145      0.072         .    (-0.004193, 0.03893)
                   cos1_tow_weekly     0.05859   0.01558     <2e-16       ***      (0.03062, 0.08775)
                   sin2_tow_weekly    -0.01776   0.01187      0.140              (-0.04096, 0.005496)
                   cos2_tow_weekly     0.04652   0.01578      0.004        **       (0.0179, 0.07644)
                   sin3_tow_weekly    -0.01754    0.0106      0.102              (-0.03977, 0.002979)
                   cos3_tow_weekly    0.006547    0.0152      0.660               (-0.02222, 0.03736)
                  sin1_tom_monthly     0.02233  0.005402     <2e-16       ***       (0.01137, 0.0322)
                  cos1_tom_monthly     0.02842  0.005134     <2e-16       ***      (0.01851, 0.03828)
                  sin2_tom_monthly     0.02867   0.01085      0.012         *     (0.007144, 0.04881)
                  cos2_tom_monthly    -0.02478   0.01071      0.024         *   (-0.04547, -0.004784)
                  sin3_tom_monthly    -0.01921   0.01059      0.064         .    (-0.03848, 0.002354)
                  cos3_tom_monthly   -0.003312   0.01029      0.724               (-0.02347, 0.01609)
                  sin4_tom_monthly   -0.005385   0.01065      0.582               (-0.02556, 0.01466)
                  cos4_tom_monthly     -0.0124   0.01101      0.262              (-0.03195, 0.009716)
                sin1_toq_quarterly     0.03636  0.006282     <2e-16       ***      (0.02399, 0.04785)
                cos1_toq_quarterly     0.02053  0.005295     <2e-16       ***      (0.01038, 0.03134)
                sin2_toq_quarterly    0.003046  0.006125      0.630              (-0.009692, 0.01462)
                cos2_toq_quarterly    -0.06041  0.006476     <2e-16       ***    (-0.07228, -0.04702)
                sin3_toq_quarterly     0.01459  0.004981      0.002        **     (0.004792, 0.02429)
                cos3_toq_quarterly     0.00309  0.004376      0.514              (-0.004833, 0.01161)
                sin4_toq_quarterly    0.002259   0.01056      0.832               (-0.01852, 0.02225)
                cos4_toq_quarterly    -0.02962   0.01145      0.012         *    (-0.0533, -0.008439)
                   sin1_ct1_yearly     -0.1227   0.01135     <2e-16       ***       (-0.145, -0.1018)
                   cos1_ct1_yearly      0.2492   0.01822     <2e-16       ***          (0.2124, 0.28)
                   sin2_ct1_yearly      0.0559   0.01158     <2e-16       ***      (0.03193, 0.07822)
                   cos2_ct1_yearly    -0.03518   0.01087     <2e-16       ***    (-0.05563, -0.01428)
                   sin3_ct1_yearly      0.1348   0.01252     <2e-16       ***         (0.108, 0.1587)
                   cos3_ct1_yearly     0.04073   0.01125     <2e-16       ***      (0.01762, 0.06136)
                   sin4_ct1_yearly     0.02773   0.00543     <2e-16       ***      (0.01716, 0.03859)
                   cos4_ct1_yearly    -0.03414   0.00632     <2e-16       ***    (-0.04484, -0.02181)
                   sin5_ct1_yearly    -0.05092   0.01196     <2e-16       ***    (-0.07545, -0.02785)
                   cos5_ct1_yearly    -0.05316   0.01128     <2e-16       ***    (-0.07383, -0.03048)
                   sin6_ct1_yearly    -0.07759    0.0101     <2e-16       ***     (-0.0982, -0.05878)
                   cos6_ct1_yearly     -0.0769    0.0106     <2e-16       ***     (-0.09622, -0.0549)
                   sin7_ct1_yearly    -0.06547    0.0115     <2e-16       ***     (-0.0861, -0.04234)
                   cos7_ct1_yearly    0.006718   0.01043      0.502               (-0.01308, 0.02822)
                   sin8_ct1_yearly    0.004615  0.006218      0.430              (-0.008056, 0.01632)
                   cos8_ct1_yearly     0.05866  0.006463     <2e-16       ***       (0.0455, 0.06991)
                   sin9_ct1_yearly     0.01066   0.01103      0.344               (-0.01209, 0.03256)
                   cos9_ct1_yearly    -0.01645    0.0112      0.136              (-0.03852, 0.003674)
                  sin10_ct1_yearly    -0.05963   0.01016     <2e-16       ***     (-0.07944, -0.0404)
                  cos10_ct1_yearly    -0.08051   0.01162     <2e-16       ***     (-0.1021, -0.05821)
                  sin11_ct1_yearly    -0.03618   0.01243      0.004        **    (-0.06199, -0.01335)
                  cos11_ct1_yearly    -0.01758   0.01075      0.108              (-0.03722, 0.004106)
                  sin12_ct1_yearly     0.01414  0.005741      0.004        **       (0.001984, 0.024)
                  cos12_ct1_yearly     0.01044  0.006375      0.094         .    (-0.001864, 0.02309)
                  sin13_ct1_yearly    -0.02856   0.01152      0.006        **    (-0.0507, -0.005518)
                  cos13_ct1_yearly      0.0608   0.01134     <2e-16       ***       (0.0391, 0.08151)
                  sin14_ct1_yearly     0.02795   0.01122      0.016         *     (0.008537, 0.05034)
                  cos14_ct1_yearly     0.01523   0.01127      0.188               (-0.005085, 0.0371)
                  sin15_ct1_yearly     0.03284   0.01126     <2e-16       ***       (0.0111, 0.05551)
                  cos15_ct1_yearly     -0.0228   0.01114      0.044         *  (-0.04386, -0.0007848)
                            y_lag7       0.144   0.02426     <2e-16       ***        (0.0986, 0.1921)
                            y_lag8     0.07066    0.0239     <2e-16       ***       (0.02443, 0.1192)
                            y_lag9    0.001779   0.01887      0.928                (-0.03204, 0.0392)
                  y_avglag_7_14_21      0.2651   0.02825     <2e-16       ***        (0.2135, 0.3264)
                  y_avglag_7_to_13     0.08815   0.02299     <2e-16       ***       (0.04406, 0.1347)
                 y_avglag_14_to_20     0.04537   0.01898      0.016         *      (0.01097, 0.08221)
    Signif. Code: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

    Multiple R-squared: 0.7174,   Adjusted R-squared: 0.7103
    F-statistic: 97.082 on 71 and 2869 DF,   p-value: 1.110e-16
    Model AIC: 18966.0,   model BIC: 19400.0

    WARNING: the condition number is large, 1.23e+04. This might indicate that there are strong multicollinearity or other numerical problems.
    WARNING: the F-ratio and its p-value on regularized methods might be misleading, they are provided only for reference purposes.





.. code-block:: default
   :lineno-start: 211


    # Check component plot of SK_2 on second fold
    model = bm.result["SK_2"]["rolling_evaluation"]["split_1"]["pipeline_result"].model
    fig = model[-1].plot_components()
    plotly.io.show(fig)





.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_001.html





Compare forecasts
^^^^^^^^^^^^^^^^^
To obtain forecasts run the ``extract_forecasts`` method. You only need to run this once.


.. code-block:: default
   :lineno-start: 222


    bm.extract_forecasts()








This method does two things.

* For every ``config``, it gathers forecast results across rolling windows and stores it
  as a dataframe in ``rolling_forecast_df`` under the ``config`` key. This helps in comparing forecasts
  and prediction accuracy across splits for the ``config``.


.. code-block:: default
   :lineno-start: 231


    # Forecast across rolling windows for SK_1
    forecast_sk_1 = bm.result["SK_1"]["rolling_forecast_df"]
    forecast_sk_1.head()






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>train_end_date</th>
              <th>forecast_step</th>
              <th>split_num</th>
              <th>ts</th>
              <th>actual</th>
              <th>forecast</th>
              <th>forecast_lower</th>
              <th>forecast_upper</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>2015-12-29</td>
              <td>1</td>
              <td>0</td>
              <td>2015-12-30</td>
              <td>8.391403</td>
              <td>7.978806</td>
              <td>7.267350</td>
              <td>8.690262</td>
            </tr>
            <tr>
              <th>1</th>
              <td>2015-12-29</td>
              <td>2</td>
              <td>0</td>
              <td>2015-12-31</td>
              <td>8.004700</td>
              <td>7.916108</td>
              <td>7.241671</td>
              <td>8.590545</td>
            </tr>
            <tr>
              <th>2</th>
              <td>2015-12-29</td>
              <td>3</td>
              <td>0</td>
              <td>2016-01-01</td>
              <td>7.589336</td>
              <td>7.859820</td>
              <td>7.042581</td>
              <td>8.677060</td>
            </tr>
            <tr>
              <th>3</th>
              <td>2015-12-29</td>
              <td>4</td>
              <td>0</td>
              <td>2016-01-02</td>
              <td>7.825245</td>
              <td>7.509112</td>
              <td>6.771791</td>
              <td>8.246432</td>
            </tr>
            <tr>
              <th>4</th>
              <td>2015-12-29</td>
              <td>5</td>
              <td>0</td>
              <td>2016-01-03</td>
              <td>8.249314</td>
              <td>8.322843</td>
              <td>7.358467</td>
              <td>9.287219</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

* Concatenates ``rolling_forecast_df`` for all the ``configs`` and stores it as a dataframe in the
  class attribute ``forecasts``. This helps in comparing forecasts and prediction accuracies across ``configs``.


.. code-block:: default
   :lineno-start: 239


    # Forecasts across configs
    bm.forecasts.head()






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>train_end_date</th>
              <th>forecast_step</th>
              <th>split_num</th>
              <th>ts</th>
              <th>actual</th>
              <th>Prophet_forecast</th>
              <th>Prophet_forecast_lower</th>
              <th>Prophet_forecast_upper</th>
              <th>SK_1_forecast</th>
              <th>SK_1_forecast_lower</th>
              <th>SK_1_forecast_upper</th>
              <th>SK_2_forecast</th>
              <th>SK_2_forecast_lower</th>
              <th>SK_2_forecast_upper</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>2015-12-29</td>
              <td>1</td>
              <td>0</td>
              <td>2015-12-30</td>
              <td>8.391403</td>
              <td>8.019895</td>
              <td>7.093385</td>
              <td>8.954007</td>
              <td>7.978806</td>
              <td>7.267350</td>
              <td>8.690262</td>
              <td>7.957234</td>
              <td>7.247341</td>
              <td>8.667127</td>
            </tr>
            <tr>
              <th>1</th>
              <td>2015-12-29</td>
              <td>2</td>
              <td>0</td>
              <td>2015-12-31</td>
              <td>8.004700</td>
              <td>8.039185</td>
              <td>7.094561</td>
              <td>8.940783</td>
              <td>7.916108</td>
              <td>7.241671</td>
              <td>8.590545</td>
              <td>7.899861</td>
              <td>7.220490</td>
              <td>8.579233</td>
            </tr>
            <tr>
              <th>2</th>
              <td>2015-12-29</td>
              <td>3</td>
              <td>0</td>
              <td>2016-01-01</td>
              <td>7.589336</td>
              <td>8.070296</td>
              <td>7.101695</td>
              <td>9.075124</td>
              <td>7.859820</td>
              <td>7.042581</td>
              <td>8.677060</td>
              <td>7.834294</td>
              <td>7.022134</td>
              <td>8.646453</td>
            </tr>
            <tr>
              <th>3</th>
              <td>2015-12-29</td>
              <td>4</td>
              <td>0</td>
              <td>2016-01-02</td>
              <td>7.825245</td>
              <td>7.856180</td>
              <td>6.884566</td>
              <td>8.779602</td>
              <td>7.509112</td>
              <td>6.771791</td>
              <td>8.246432</td>
              <td>7.521520</td>
              <td>6.784284</td>
              <td>8.258756</td>
            </tr>
            <tr>
              <th>4</th>
              <td>2015-12-29</td>
              <td>5</td>
              <td>0</td>
              <td>2016-01-03</td>
              <td>8.249314</td>
              <td>8.243508</td>
              <td>7.242261</td>
              <td>9.122911</td>
              <td>8.322843</td>
              <td>7.358467</td>
              <td>9.287219</td>
              <td>8.346246</td>
              <td>7.390849</td>
              <td>9.301642</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />

For any ``config`` you can plot forecasts across splits. This allows you to quickly check if there is
any particular time window where the test performance drops. The forecasts for adjacent folds will
overlap if the time windows of the corresponding folds overlap.


.. code-block:: default
   :lineno-start: 247


    fig = bm.plot_forecasts_by_config(config_name="SK_1")
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_002.html





The importance of this function becomes more significant when assessing a models performance over a
longer period e.g. a year or multiple years. You can quickly catch if models test performance drops
during weekends, specific months or holiday seasons.

You can also compare forecasts from multiple ``configs`` by ``forecast_step`` which is
defined as any number between 1 and ``forecast_horizon``. This is useful in forecasts with longer
forecast horizons to check if the forecast volatility changes over time.


.. code-block:: default
   :lineno-start: 259


    fig = bm.plot_forecasts_by_step(forecast_step=3)
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_003.html





Compare Errors
^^^^^^^^^^^^^^
You can compare the predictive performance of your models via multiple evaluation metrics.
In this example we will use MAPE and RMSE, but you can use any metric from ``EvaluationMetricEnum``.


.. code-block:: default
   :lineno-start: 268


    metric_dict = {
        "MAPE": EvaluationMetricEnum.MeanAbsolutePercentError,
        "RMSE": EvaluationMetricEnum.RootMeanSquaredError
    }








Non Grouping Errors
^^^^^^^^^^^^^^^^^^^
To compare evaluation metrics without any grouping use ``get_evaluation_metrics``.
The output shows metric values by ``config`` and ``split``. We can group by ``config_name`` to get
metric values aggregated across all folds.


.. code-block:: default
   :lineno-start: 280


    # Compute evaluation metrics
    evaluation_metrics_df = bm.get_evaluation_metrics(metric_dict=metric_dict)
    # Aggregate by model across splits
    error_df = evaluation_metrics_df.drop(columns=["split_num"]).groupby("config_name").mean()
    error_df






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>train_MAPE</th>
              <th>test_MAPE</th>
              <th>train_RMSE</th>
              <th>test_RMSE</th>
            </tr>
            <tr>
              <th>config_name</th>
              <th></th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>Prophet</th>
              <td>4.009155</td>
              <td>4.064214</td>
              <td>0.485801</td>
              <td>0.427914</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>3.603298</td>
              <td>4.572780</td>
              <td>0.450865</td>
              <td>0.443342</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>3.600322</td>
              <td>4.496454</td>
              <td>0.449541</td>
              <td>0.442640</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />


.. code-block:: default
   :lineno-start: 288


    # Visualize
    fig = bm.plot_evaluation_metrics(metric_dict)
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_004.html





Train MAPE is high because some values in training dataset are close to 0.

You can also compare the predictive accuracy across splits for any model from ``configs``.
This allows you to check if the model performance varies significantly across time periods.


.. code-block:: default
   :lineno-start: 298


    # Compute evaluation metrics for a single config
    evaluation_metrics_df = bm.get_evaluation_metrics(metric_dict=metric_dict, config_names=["SK_1"])
    # Aggregate by split number
    error_df = evaluation_metrics_df.groupby("split_num").mean()
    error_df.head()






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>train_MAPE</th>
              <th>test_MAPE</th>
              <th>train_RMSE</th>
              <th>test_RMSE</th>
            </tr>
            <tr>
              <th>split_num</th>
              <th></th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>0</th>
              <td>3.611241</td>
              <td>3.072742</td>
              <td>0.451962</td>
              <td>0.280462</td>
            </tr>
            <tr>
              <th>1</th>
              <td>3.599799</td>
              <td>2.308179</td>
              <td>0.450181</td>
              <td>0.220802</td>
            </tr>
            <tr>
              <th>2</th>
              <td>3.601513</td>
              <td>6.009099</td>
              <td>0.450544</td>
              <td>0.535961</td>
            </tr>
            <tr>
              <th>3</th>
              <td>3.600639</td>
              <td>6.901099</td>
              <td>0.450773</td>
              <td>0.736143</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />


.. code-block:: default
   :lineno-start: 306


    # Visualize
    title = "Average evaluation metric across rolling windows"
    data = []
    # Each row (index) is a config. Adds each row to the bar plot.
    for index in error_df.index:
        data.append(
            go.Bar(
                name=index,
                x=error_df.columns,
                y=error_df.loc[index].values
            )
        )
    layout = go.Layout(
        xaxis=dict(title=None),
        yaxis=dict(title="Metric Value"),
        title=title,
        showlegend=True,
        barmode="group",
    )
    fig = go.Figure(data=data, layout=layout)
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_005.html





Grouping Errors
^^^^^^^^^^^^^^^
To compare evaluation metrics with grouping use ``get_grouping_evaluation_metrics``.
This allows you to group the error values by time features such as day of week, month etc.


.. code-block:: default
   :lineno-start: 334


    # Compute grouped evaluation metrics
    grouped_evaluation_df = bm.get_grouping_evaluation_metrics(
        metric_dict=metric_dict,
        which="test",
        groupby_time_feature="str_dow")
    # Aggregate by split number
    error_df = grouped_evaluation_df.groupby(["str_dow", "config_name"]).mean()
    error_df






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th></th>
              <th>split_num</th>
              <th>test MAPE</th>
              <th>test RMSE</th>
            </tr>
            <tr>
              <th>str_dow</th>
              <th>config_name</th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th rowspan="3" valign="top">1-Mon</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>8.235986</td>
              <td>0.793895</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>7.271136</td>
              <td>0.692728</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>7.069657</td>
              <td>0.674420</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">2-Tue</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>3.634147</td>
              <td>0.311949</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>5.880363</td>
              <td>0.501733</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>6.069028</td>
              <td>0.517991</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">3-Wed</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>3.548818</td>
              <td>0.299014</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>5.148044</td>
              <td>0.435114</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>5.119414</td>
              <td>0.432500</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">4-Thu</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>2.755924</td>
              <td>0.221571</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>3.357612</td>
              <td>0.269911</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>3.166958</td>
              <td>0.255332</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">5-Fri</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>4.299685</td>
              <td>0.338231</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>3.493988</td>
              <td>0.276743</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>2.825097</td>
              <td>0.223435</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">6-Sat</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>3.153319</td>
              <td>0.245955</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>2.717081</td>
              <td>0.212107</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>2.751691</td>
              <td>0.214711</td>
            </tr>
            <tr>
              <th rowspan="3" valign="top">7-Sun</th>
              <th>Prophet</th>
              <td>1.5</td>
              <td>2.821620</td>
              <td>0.251621</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>1.5</td>
              <td>4.141234</td>
              <td>0.365619</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>1.5</td>
              <td>4.473329</td>
              <td>0.394380</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />


.. code-block:: default
   :lineno-start: 345


    # Visualize
    fig = bm.plot_grouping_evaluation_metrics(
        metric_dict=metric_dict,
        which="test",
        groupby_time_feature="str_dow")
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_006.html





As you can see all the models have higher MAPE and RMSE during weekends. That means adding
``is_weekend`` indicator to the models will help.

Compare runtimes
^^^^^^^^^^^^^^^^
You can compare and visualize runtimes of the models using the following codes.


.. code-block:: default
   :lineno-start: 360


    # Compute runtimes
    runtime_df = bm.get_runtimes()
    # Aggregate across splits
    runtimes_df = runtime_df.drop(columns=["split_num"]).groupby("config_name").mean()
    runtimes_df






.. only:: builder_html

    .. raw:: html

        <div>
        <style scoped>
            .dataframe tbody tr th:only-of-type {
                vertical-align: middle;
            }

            .dataframe tbody tr th {
                vertical-align: top;
            }

            .dataframe thead th {
                text-align: right;
            }
        </style>
        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>runtime_sec</th>
            </tr>
            <tr>
              <th>config_name</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>Prophet</th>
              <td>153.11700</td>
            </tr>
            <tr>
              <th>SK_1</th>
              <td>58.32925</td>
            </tr>
            <tr>
              <th>SK_2</th>
              <td>50.89800</td>
            </tr>
          </tbody>
        </table>
        </div>
        <br />
        <br />


.. code-block:: default
   :lineno-start: 368


    # Visualize
    fig = bm.plot_runtimes()
    plotly.io.show(fig)




.. raw:: html
    :file: /Users/kayang/IdeaProjects/github/greykite/docs/gallery/tutorials/images/sphx_glr_0300_benchmark_007.html





You can see ``Silverkite`` models run almost 3 times faster compared to ``Prophet``.

Debugging the Benchmark
-----------------------
When the `run` method is called, the input ``configs`` are first assessed of
their suitability for a cohesive benchmarking procedure via the ``validate`` method.
This is done prior to passing the ``configs`` to the forecasting pipeline to save wasted
computing time for the user.
Though not necessary, the user is encouraged to use ``validate`` for debugging.

The ``validate`` method runs a series of checks to ensure that

* The ``configs`` are compatible among themselves. For example, it checks if all the ``configs``
  have the same ``forecast horizon``.
* The ``configs`` are compatible with the CV schema. For example, ``forecast_horizon`` and
  ``periods_between_train_test`` parameters of ``configs`` are
  matched against that of the ``tscv``.

Note that the ``validate`` method does not guarantee that the models will execute properly
while in the pipeline. It is a good idea to do a test run on a smaller data and/ or smaller
number of splits before running the full procedure.

In the event of a mismatch a ``ValueError`` is raised with informative error messages
to help the user in debugging. Some examples are provided below.

Error due to incompatible model components in config
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default
   :lineno-start: 401


    # regressor_cols is not part of Prophet's model components
    model_components=ModelComponentsParam(
        regressors={
            "regressor_cols": ["regressor1", "regressor2", "regressor_categ"]
        }
    )
    invalid_prophet = replace(Prophet, model_components_param=model_components)
    invalid_configs = {"invalid_prophet": invalid_prophet}
    bm = BenchmarkForecastConfig(df=df, configs=invalid_configs, tscv=tscv)
    try:
        bm.validate()
    except ValueError as err:
        print(err)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Unexpected key(s) found: {'regressor_cols'}. The valid keys are: dict_keys(['add_regressor_dict'])




Error due to wrong template name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default
   :lineno-start: 419


    # model template name is not part of TemplateEnum, thus invalid
    unknown_template = replace(Prophet, model_template="SOME_TEMPLATE")
    invalid_configs = {"unknown_template": unknown_template}
    bm = BenchmarkForecastConfig(df=df, configs=invalid_configs, tscv=tscv)
    try:
        bm.validate()
    except ValueError as err:
        print(err)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Model Template 'SOME_TEMPLATE' is not recognized! Must be one of: SILVERKITE, SILVERKITE_DAILY_90, SILVERKITE_WEEKLY, SILVERKITE_HOURLY_1, SILVERKITE_HOURLY_24, SILVERKITE_HOURLY_168, SILVERKITE_HOURLY_336, SILVERKITE_EMPTY, SK, PROPHET or satisfy the `SimpleSilverkiteTemplate` rules.




Error due to different forecast horizons in configs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default
   :lineno-start: 432


    # the configs are valid by themselves, however incompatible for
    # benchmarking as these have different forecast horizons
    Prophet_forecast_horizon_30 = replace(Prophet, forecast_horizon=30)
    invalid_configs = {
        "Prophet": Prophet,
        "Prophet_30": Prophet_forecast_horizon_30
    }
    bm = BenchmarkForecastConfig(df=df, configs=invalid_configs, tscv=tscv)
    try:
        bm.validate()
    except ValueError as err:
        print(err)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Prophet_30's 'forecast_horizon' (30) does not match that of 'tscv' (7).




Error due to different forecast horizons in config and tscv
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default
   :lineno-start: 449


    ## Error due to different forecast horizons in config and tscv
    tscv = RollingTimeSeriesSplit(forecast_horizon=15)
    bm = BenchmarkForecastConfig(df=df, configs=configs, tscv=tscv)
    try:
        bm.validate()
    except ValueError as err:
        print(err)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Prophet's 'forecast_horizon' (7) does not match that of 'tscv' (15).





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 17 minutes  47.003 seconds)


.. _sphx_glr_download_gallery_tutorials_0300_benchmark.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 0300_benchmark.py <0300_benchmark.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 0300_benchmark.ipynb <0300_benchmark.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
